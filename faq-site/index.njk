<!doctype html>
<html lang="en">

    <head>
        <meta name="viewport" content="initial-scale=1.0, width=device-width">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

        {# Favicons #}
        <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>

        {# Theme color for browser chrome (chrome android) #}
        <meta name="theme-color" content="#0171a1">

        {# Primary Meta Tags #}
        <title>COVID-19 FAQ</title>

        {# Google Fonts #}
        <link href="https://fonts.googleapis.com/css2?family=Noto+Sans&display=swap" rel="stylesheet">

        <style>
            body,
            html {
                margin: 0;
                padding: 0;
                color: #0c0c0c;
            }
            html {
                font-family: "Noto Sans", sans-serif;
                line-height: 1.5em;
            }

            footer.footer,
            header.header,
            main.content {
                padding: 12px;
            }

            header.header {
                text-align: center;
                background: #0171a1;
                color: white;
            }

            main.content {
                max-width: 48em;
                margin: 0 auto;
                display: block;
                /* for ie 11 */
            }

            footer.footer {
                background: #dddddd;
                text-align: center;
            }

            .search {
                width: 100%;
                border-radius: 3px;
                box-shadow: none;
                border: 1px solid grey;
                height: 33px;
                line-height: 33px;
                padding-left: 10px;
                font-size: 1.2em;
                margin-top: 15px;
            }

            mark {
                background: rgba(255, 247, 94, 0.86);
                color: black;
            }
            .contents mark {
                background: rgba(255, 247, 94, 0.56);
            }
            .match-title .contents mark {
                background: rgba(255, 247, 94, 0.26);
            }

            .faqs {
                padding-left: 15px;
                margin-top: 30px;
            }
            .faqs li {
                list-style: none;
            }
            .faqs ul li {
                list-style: disc;
            }

            .filtering .faq {
                display: none;
            }

            .filtering .faq.marked {
                display: block;
            }

            li.faq {
                margin-top: 20px;
            }

            summary.context {
                text-indent: -15px;
            }

            summary.context h2 {
                display: inline;
            }

            a.permalink {
                font-size: 1.5em;
                text-decoration: none;
                color: #626991;
            }
        </style>
    </head>

    <body class="page ">

        <header id="header" class="header">

            <h1>VT COVID-19 FAQ</h1>

        </header>

        <main class="content">

            <div>
                <input type="search" class="search" id="search" placeholder="Type to search">
            </div>

            <ul class="faqs">
                {% for faq in faqs.qnaDocuments %}
                    <li id="{{faq.id}}" class="faq">
                        <details >
                            <summary class="context">
                                <h2>{{faq.questions | first}}</h2>
                                <a class="permalink" href="#{{faq.id}}">#</a>
                            </summary>

                            <div class="contents">

                                <h3>Question(s)</h3>

                                <ul class="questions">
                                    {% for q in faq.questions %}
                                        <li class="question">{{q}}</li>
                                    {% endfor %}
                                </ul>

                                <h3>Answer</h3>
                                <p>
                                    {{faq.answer | md | safe}}
                                </p>
                            </div>

                        </details>
                    </li>
                {% endfor %}
            </ul>

        </main>

        <footer class="footer">

            <p class="copyright">
                &copy; 2020 Vermont Department of Health
            </p>
            <p>
                Stay informed at
                <a href="https://www.healthvermont.gov/covid">HealthVermont.gov/COVID</a>
            </p>

        </footer>

        <script src="/scripts/mark.js"></script>
        {# IE 11 Polyfills #}
        <script>

            // https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach
            if (window.NodeList && !NodeList.prototype.forEach) {
                NodeList.prototype.forEach = function (callback, thisArg) {
                    thisArg = thisArg || window;
                    for (var i = 0; i < this.length; i++) {
                        callback.call(thisArg, this[i], i, this);
                    }
                };
            }

            // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
            if (!Element.prototype.matches) {
                Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
                    var matches = (this.document || this.ownerDocument).querySelectorAll(s),
                        i = matches.length;
                    while (--i >= 0 && matches.item(i) !== this) {}
                    return i > -1;
                };
            }

            // https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle
            if (DOMTokenList.prototype.toggle) {
                DOMTokenList.prototype.toggle = function (token, force) {
                    if (force) {
                        this.add(token)
                    } else {
                        this.remove(token)
                    }
                }
            }

            // https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend
            (function (arr) {
                arr.forEach(function (item) {
                    if (item.hasOwnProperty('prepend')) {
                        return;
                    }
                    Object.defineProperty(item, 'prepend', {
                        configurable: true,
                        enumerable: true,
                        writable: true,
                        value: function prepend() {
                            var argArr = Array
                                    .prototype
                                    .slice
                                    .call(arguments),
                                docFrag = document.createDocumentFragment();

                            argArr.forEach(function (argItem) {
                                var isNode = argItem instanceof Node;
                                docFrag.appendChild(
                                    isNode
                                    ? argItem
                                    : document.createTextNode(String(argItem)));
                            });

                            this.insertBefore(docFrag, this.firstChild);
                        }
                    });
                });
            })([Element.prototype, Document.prototype, DocumentFragment.prototype]);

            // add closest method
            if (window.Element && !Element.prototype.closest) {
                Element.prototype.closest = function (s) {
                    var matches = (this.document || this.ownerDocument).querySelectorAll(s),
                        i,
                        el = this;
                    do {
                        i = matches.length;
                        while (--i >= 0 && matches.item(i) !== el) {};
                    } while ((i < 0) && (el = el.parentElement));
                    return el;
                };
            }
        </script>
        <script>
            var keywordInput = document.querySelector("#search");
            var searchArea = document.querySelector(".faqs")
            var markInstance = new Mark(searchArea);

            keywordInput.addEventListener("input", performMark);

            function performMark() {

                // Read the keyword
                var keyword = keywordInput.value;

                var shouldFilter = keyword.length > 2

                // apply filtering class if we have a search term
                searchArea
                    .classList
                    .toggle('filtering', shouldFilter)

                // resets?
                // document.querySelectorAll("[open]").forEach(function(el) {
                //     el.open = false;
                // })

                // Remove previous marked elements and mark
                // the new keyword inside the context
                markInstance.unmark({
                    done: function () {

                        if (shouldFilter) {

                            markInstance.mark(keyword, {done: markComplete});

                        }
                    }
                });
            };

            function markComplete() {
                // reset all marked elements
                document
                    .querySelectorAll(".marked")
                    .forEach(function (el) {
                        el
                            .classList
                            .remove("marked")
                    })
                document
                    .querySelectorAll(".match-title")
                    .forEach(function (el) {
                        el
                            .classList
                            .remove("match-title")
                    })
                document
                    .querySelectorAll(".match-body")
                    .forEach(function (el) {
                        el
                            .classList
                            .remove("match-body")
                    })

                // tag all marked element parents
                document
                    .querySelectorAll("mark")
                    .forEach(function (el) {
                        var item = el.closest(".faq")

                        if (item) {
                            item
                                .classList
                                .add("marked")

                            if (el.closest("h2")) {
                                item
                                    .classList
                                    .add("match-title")
                            } else {
                                item
                                    .classList
                                    .add("match-body")
                            }
                        }

                    })

                document
                    .querySelectorAll(".match-title")
                    .forEach(function (el) {
                        searchArea.prepend(el)
                    })

            }
        </script>
    </body>

</html>
